" Temporary fileslate dir
set directory=~/.vim/tmp

" entable mouse scroll
set mouse=a

" pathogen
call pathogen#infect() 

" set cursorline
set nocursorline

" Turn off vi compatibility mode
set nocompatible

set nostartofline

" Show line numbers (off = set nonu)
set nu

" Tur of message 'Thanks for flying vim'
set title

" Use incremental search
set incsearch
" Highlight search results
" set hlsearch

" Allow Vim to manage multiple buffers efectively
" 1. The current buffer can be put to the background without writing to disk
" 2. When a background buffer becomes current again, marks and undo-history are
" remembered
set hidden

" Boost history (20 to 1000)
set history=1000

" keep a backup file
" in ~/.vim/backup
set backup 
set backupdir=~/.vim/backup

" persistent undo
" allows to undo even after closing vim or even
" shutting down the computer
set undofile
set undodir=~/.vim/undo

" remember some stuff after quiting vim:
" marks, registers, searches, buffer list
set viminfo='20,<50,s10,h,%

" use backspace as a normal app
" set backspace=indent,eol,start

" search is not case sensitive
set ignorecase

" enable syntax high
syntax on

set tabstop=4
set shiftwidth=4
" auto indent when editing
set autoindent
set smartindent

" Use plugins according to iletypes
filetype indent on
filetype plugin on
filetype on

" NERDTree configuration
let NERDTreeWinPos='left'
let NERDTreeChDiMode=0
" NERDTree autoclose on only window
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
	if exists("t:NERDTreeBufName")
		if bufwinnr(t:NERDTreeBufName) != -1
			if winnr("$") == 1
				q
			endif
		endif
	endif
endfunction
" Toggle NERDTreeTabs
map <silent> nt :NERDTreeTabsToggle<cr>

" tcomment shortcut
map <leader>c <C-_><C-_><CR>

" Navigate up and down split
"map <C-J> <C-W>j<C-W>_
"map <C-K> <C-W>k<C-W>_ 
" Turn off search highlight
nmap <silent> <C-N> :silent noh<CR>

" User keys
map <C-S> :w<cr>


" Tlist configs
map <silent> tl :TlistToggle<CR>
let Tlist_Use_Right_Window = 1

let g:user_zen_expandabbr_key = '<c-e>'

" macvim gui interface
if has("gui_running")
	set guioptions=egmrt
	set guioptions-=r
endif

" THEME
" set background=light
syntax enable
" gui and terminal colorschemes
if has("gui_running")
	colorscheme github
	set nowrap
	set guifont:"Source Pro":h13
else
	colorscheme default
endif

" macvim tab navigation
if has("gui_macvim")
	map <D-1> :tabfirst<Cr>
	map <D-2> :tabfirst<Cr>gt
	map <D-3> :tabfirst<Cr>3gt
	map <D-4> :tabfirst<Cr>4gt
	map <D-5> :tabfirst<Cr>5gt
	map <D-6> :tabfirst<Cr>6gt
	map <D-7> :tabfirst<Cr>7gt
	map <D-8> :tabfirst<Cr>8gt
	map <D-9> :tabfirst<Cr>9gt
endif


" ctrlp plugin
let g:ctrlp_map = '<c-p>'
let g:ctrlp_working_path_mode = 2
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/fixtures/*,*/functional/*  " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux


" Drupal file type
if has("autocmd")
	" Drupal *.module and *.install files.
	augroup module
		autocmd BufRead,BufNewFile *.module set filetype=php
		autocmd BufRead,BufNewFile *.install set filetype=php
		autocmd BufRead,BufNewFile *.test set filetype=php
		autocmd BufRead,BufNewFile *.inc set filetype=php
		autocmd BufRead,BufNewFile *.profile set filetype=php
		autocmd BufRead,BufNewFile *.view set filetype=php
	augroup END
endif

" Vim-powerline configuration
set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs
