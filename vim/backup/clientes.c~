#ifndef _STDIO
#define _STDIO
#include <stdio.h>
#endif
#ifndef _STRING
#define _STRING
#include <string.h>
#endif
#ifndef _STDLIB
#define _STDLIB
#include <stdlib.h>
#endif

#include "ll.h"
#include "localidade.h"
#include "clientes.h"
#include "hash.h"
#include "erro.h"

int erro_flag;


LLIGADA *clientes_list;
HASH_HOLDER *index_name;
HASH_HOLDER *index_contribuinte;

void clientes_search_name(char *name) {
	CLIENTE *c;
	c = (CLIENTE *) hash_search(index_name, name);
	if(c != NULL) {
	printf("Nome: %s. ",c->nome);
	printf("Num: %ld \n",c->contribuinte);	
	} else {
		printf("Cliente nÃ£o encontrado!\n");
	}
}

void clientes_init() {
	index_contribuinte = hash_init(50000);
	index_name = hash_init(50000);
}

CLIENTE *clientes_new() {
	CLIENTE *c = (CLIENTE *) malloc(sizeof(CLIENTE));
	c->nome = (char *) calloc(50, sizeof(char));
	c->morada = (char *) calloc(50, sizeof(char));
	return c;
}

void clientes_remove(long int cliente_id) {
	char buffer[sizeof(long)*8+1];
	LLIGADA *aux = clientes_list;
	LLIGADA *auxB = aux;
	CLIENTE *c = NULL;
	while(aux != NULL) {
		c = (CLIENTE *) aux->info;
		if(c->contribuinte == cliente_id) {
			hash_remove(index_name, c->nome);
			sprintf(buffer, "%ld",c->contribuinte);
			hash_remove(index_contribuinte, buffer);
			auxB->next = aux->next;
			free(aux);
			aux = NULL;
		} else {
			auxB = aux;
			aux = aux->next;
		}
	}
	hash_dump(index_contribuinte);
	hash_dump(index_name);
}

void clientes_insert(CLIENTE *c) {
	char buffer[sizeof(long)*8+1];
	clientes_list = ll_insert(clientes_list, (void *) c);
	hash_insert(index_name, (void *) c, c->nome);
	sprintf(buffer, "%ld",c->contribuinte);
	hash_insert(index_contribuinte, (void *) c, buffer);
	hash_dump(index_contribuinte);
	hash_dump(index_name);
}

void clientes_dump_list() {
	LLIGADA *aux = clientes_list;
	CLIENTE *c;
	printf("\nLista de CLIENTES no sistema:\n");
	if (aux==NULL) { erro_flag=E_VAZIA;
		mensagem_de_erro(erro_flag);
	}
	while(aux != NULL) {
		c = (CLIENTE *) aux->info;
		printf("Nome: %s. ",c->nome);
		printf("Num: %ld \n",c->contribuinte);
		aux = aux->next;
	}
	printf("\n\n");
}
