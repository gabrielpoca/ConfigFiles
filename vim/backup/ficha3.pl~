% i
%maior(X,Y,R):- R is X, X > Y.
%maior(X,Y,R):- R is Y.

maior(X,Y,X):- X >= Y.
maior(X,Y,Y):- X < Y.

% ii
nao(Q):- Q,!,fail.
nao(Q).

% iii
pertence(X,[X|T]).
pertence(X,[H|T]):- pertence(X,T).

% iv
comprimento([],0).
comprimento([H|T],C):- comprimento(T,C1), C is C1 + 1.

% v
quantos([],0).
quantos([H|T],C):- quantos(T,C1), nao(pertence(H,T), C is C1+1.
quantos([H|T],C):- pertence(H,T), quantos(T,C).

% vi
apagar(X,[],[]).
apagar(X,[X|T],T).
apagar(X,[H|T],[H|T2]):- apagar(X,T,T2).

% vii
apagartudo(X,[],[]).
apagartudo(X,[X|T],R):- apagartudo(X,T,R).
apagartudo(X,[H|T],[H|T2]):- apagartudo(X,T,T2).

% viii
% adicionar(X,[],[X|[]]).
% adicionar(X,[X|L],[X|L]).
% adicionar(X,[Y|L],[Y|R]):- adicionar(X,L,R).
% versao optimizada.
adicionar(X,L,[X|L]):- nao(pertence(X,L)).

% ix
concatenar([],L,L).
concatenar([H|T],L,[H|L2]):- concatenar(T,L,L2).

% x
inverter([],[]).
inverter([H|T],R):- inverter(T,L), concatenar(L,[H],R).

% xi
sublista([],[]).
sublista(S,L):- concatenar(L1,S,L3), concatenar(L3,L4,L).
