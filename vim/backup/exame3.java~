

class Manager extends Thread {

	Scoket _cs;
	WaitManager _w;

	public Manager(Socket cs, WaitManager w) {
		_cs = cs;
		_w = w;
	}

	public void run() {

		ObjectInputStream in = new ObjectInputStream( _cs.getInputStream());
		boolean run = true;

		String s = (String) in.readObject();
		String so = s;

		if(s.startsWidth("esperar "){
			so = s.replaceFirst("esperar ","");
			_w.newWait(so);
			_w.checkSo(so);
		} else {
			run = _w.resumeWait(so);
		}

		int num = 0;
		in.timeout(3);

		try{
			while(run) {
				Thread.sleep(60000);
				out.writeInt(num);
				num++;
				if(num == in.readInt()) {
					// WORKING
				}
				else {
					//FAZ COISAS
				}
			}
		} catch (timeoutException e){
			// ESTA DOWN
			break;
		}

	}

}


class WaitManager {

	ReentrantLock lock = new ReentrantLock();
	Condition blocked = lock.newCondition();

	TreeMap<String, boolean> _so;

	public WaitManager() {
		_ss = new TreeMap<String, boolean>();
	}

	public void newWait(String so) {
		lock.lock();
		_so.put(so, false);
		lock.unlock();
	}

	public boolean resumeWait(String so) {
		lock.lock();
		boolean result = true;
		if(_so.containsKey(so)){
			_so.get(so) = true;
			result = false;
			notifyAll();
		}
		lock.unlock();
		return result;
	}

	public void checkWait(String so) {
		lock.lock();
		while(!_so.get(so))
			blocked.wait();
		_so.remove(so);
		lock.unlock();
	}

}

class SERVER {

	public static void main(String[] argv) {

		ServerSocket ss = new ServerSocket(9999);
		WaitManager w = new WaitManager();
		boolean run = true;

		while(run) {
			Socket cs = ss.accept();
			Thread t = new Thread( new Manager(cs, w) );
		}
	}


}
