import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.*;

class Box {

	ReentrantLock lock = new ReentrantLock();
	Condition empty = lock.newCondition();
	Condition full = lock.newCondition();

	final int SIZE;
	int _index;

	int[] _box;

	public Box (int size) {
		SIZE = size;
		_box = new int[SIZE];
		_index = 0;
	}

	public int get() {
		int value = 0;
		try {
			lock.lock();
			if(_index == 0)
				empty.await();
			_index--;
			value = _box[_index];
			full.signalAll();
			lock.unlock();
		} catch (InterruptedException e) {
		}
		return value;
	}

	public void put(int value) {
		try {
			lock.lock();
			if(_index == SIZE)
				full.await();
			_box[_index] = value;
			_index++;
			empty.signalAll();
			lock.unlock();
		} catch (InterruptedException e) {
		}
	}
}

class Getter extends Thread {

	Box _box;
	int _times;

	public Getter(Box box, int times) {
		_times = times;
		_box = box;
	}

	public void run() {
		try {
			Random gen = new Random();
			for(int i = 0; i < _times; i++) {
				System.out.println("Getting "+_box.get());
				this.sleep(gen.nextInt(3000));
			}
		} catch (InterruptedException e) {
		}
	}
}


class Putter extends Thread {

	Box _box;
	int _times;

	public Putter(Box box, int times) {
		_times = times;
		_box = box;
	}

	public void run() {
		try {
			Random gen = new Random();
			for(int i = 0; i < _times; i++) {
				int next = gen.nextInt(999);
				_box.put(next);
				System.out.println("Puttin "+next);
				this.sleep(gen.nextInt(3000));
			}
		} catch (InterruptedException e) {
		}
	}
}

class EX41 {

	public static void main (String[] argv) {
		Box b = new Box(10);
		Thread p = new Thread( new Putter(b, 100) );
		Thread g = new Thread( new Getter(b, 100) );
		p.start();
		g.start();
		p.join();
		g.join();
	}

}
