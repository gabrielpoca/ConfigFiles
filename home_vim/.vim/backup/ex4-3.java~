import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.*;

class RWLock {

	ReentrantLock lock = new ReentrantLock();
	Condition allowRead = lock.newCondition();
	Condition allowWrite = lock.newCondition();

	int readers = 0;
	int writers = 0;

	int wantWrite = 0;

	String db = "";

	public void readLock() {
		try {
			lock.lock();
			if( writers != 0 || wantWrite > 0 )
				allowRead.await();
			readers++;
			allowRead.signalAll();
			lock.unlock();
		} catch (InterruptedException e) {
		}
	}

	public void readUnlock() {
		lock.lock();
		readers--;
		if(readers == 0)
			allowWrite.signalAll();
		lock.unlock();
	}

	public void writeLock() {
		try {
			lock.lock();
			wantWrite++;
			if( writers > 0 || readers > 0 ) 
				allowWrite.await();
			wantWrite--;
			writers++;
			lock.unlock();
		} catch (InterruptedException e) {
		}
	}

	public void writeUnlock() {
		lock.lock();
		writers--;
		allowWrite.signalAll();
		allowRead.signalAll();
		lock.unlock();
	}

	public String read() {
		readLock();
		String v = db;
		readUnlock();
		return v;
	}

	public String write(String v) {
		writeLock();
		db = v;
		writeUnlock();
		return v;
	}

}

class Writter extends Thread {

	RWLock _db;

	public Writter(RWLock db) {
		_db = db;
	}

	public void run() {
		try {
			Random gen = new Random();
			for(int i = 0; i < 100; i++) {
				System.out.println("WRITER : "+_db.write(""+i));
				this.sleep(gen.nextInt(1000));
			}
		} catch (InterruptedException e) {
		}
	}

}


class Reader extends Thread {

	RWLock _db;

	public Reader (RWLock db) {
		_db = db;
	}

	public void run() {
		try {
			Random gen = new Random();
			String s = "";
			while(!s.equals("100")) {
				s = _db.read();
				System.out.println("READER : "+s);
				this.sleep(gen.nextInt(3000));
			}
		} catch (InterruptedException e) {
		}
	}

}


class EX43 {

	public static void main (String[] argv) {

		RWLock l = new RWLock();
		Thread w = new Thread ( new Writter(l) );
		Thread[] r = new Thread[10];
		for(int i = 0; i < r.length; i++)
			r[i] = new Thread ( new Reader(l) );
		w.start();
		for(int i = 0; i < r.length; i++)
			r[i].start();

		try {
			w.join();
			for(int i = 0; i < r.length; i++)
				r[i].join();
		} catch ( InterruptedException e) {
		}

	}
}
