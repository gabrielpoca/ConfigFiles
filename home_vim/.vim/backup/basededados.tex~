\chapter{Base de Dados}
A base de dados funciona sobre a tencologia Oracle e um modelo relacional da mesma pode ser encontrado em anexo. As secções abaixo tratam algumas convenções adoptadas devido ao uso da framework CakePHP, o méotodo de dispensa, o controlo de embalagens por receita e a inforamção nas diferentes tabelas.

\section{Convencções do CakePHP}
De modo a facilitar o desenvolvimento a framework segue algumas convenções que permitem excesso de configuração. A respeito das tabelas da base de dados sugere-se que cada entrada de cada tabela deve ter como chave primária um campo denominado \textit{id}, está claro que existe a possibilidade de configuração e tal foi mesmo necessário, adoptando a convenção cada entrada em determinadas tabelas é identificada por um campo denominado \textit{id} sendo este um \textit{number}. Está claro que esta primeira convenção permite ao CakePHP identificar a chave primária sem a necessidade por parte do programador de especificar.

Uma outra convenção importante corresponde aos nomes das tabelas, deve corresponde ao plurar da informação contida reduzida em uma palavra e as chaves estrangeiras devem ser o nome singular da tabela seguido de um \textit{\_id}. Por exemplo, uma chave estrangeira da tabela \textit{Farmácias} seria \textit{farmacia\_id}.


\section{Informação e Tabelas}
As subsecções a seguir explicam a informação armazenada em quais tabelas.


\subsection{Especialidades}
Armazena as especialidades médicas. Cada médico pode conter uma especialidade.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] nome
\item[Chaves Candidatas] id
\end{description}

\subsection{Médicos}
Contém a informação de cada médico, como nome, especialidade, morada, telefone, etc.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] nome
\item[Chaves Candidatas] id, numero\_celula
\end{description}

\subsection{Grupos}
Permite relacionar medicamentos. Medicamentos do mesmo grupo são semelhantes.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}

\subsection{Embalagens}
Contém a informação de cada embalagem, como medicamento, quantidade, dsagem, preço, etc.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] medicamento\_id, grupo\_id
\item[Chaves Candidatas] id
\end{description}

\subsection{Medicamentos}
Contém a informação de cada medicamento, como o nome, tipo, forma e dosagem.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] forma\_id
\item[Chaves Candidatas] id
\end{description}

\subsection{Locais de Prescrição}
Armazena os locais onde pode ser realizada a prescrição.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}

\subsection{Entidades Financeiras}
Armazena as entidades financeiras disponiveis para prescrição.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}

\subsection{Receitas}
Contém informação de cada receita, mas não das embalagens associadas, essa é armazenada na tabela RecaitaEmbalagens.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] local\_id, medico\_id, entidade\_id, utente\_id.
\item[Chaves Candidatas] id
\end{description}

\subsection{Utentes}
Armazena a informação de cada utente, como nome, data de nascimento e regime.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}

\subsection{ReceitasEmbalagens}
Cada receita contém embalagens, as embalagens são armazenadas nesta tabela e indexadas pela chave primária dupla de identificação da receita e identificação da embalagem.

\begin{description}
\item[Chave Primária] receita\_id, embalagem\_id.
\item[Chaves Estrangeiras] receita\_id, embalagem\_id, farmacia\_id.
\item[Chaves Candidatas] receita\_id, embalagem\_id.
\end{description}

\subsection{Farmacias}
Armazena a informação de cada farmácia que pode interagir com o sistema.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}

\subsection{Formas}
Contém as formas disponiveis de cada medicamento.

\begin{description}
\item[Chave Primária] id
\item[Chaves Estrangeiras] Não possui chaves estrangeiras.
\item[Chaves Candidatas] id
\end{description}


\subsection{Receitas}
As receitas são armazenadas nas tabelas \textit{ReceitaEmbalagens} e \textit{Receitas}. Na primeira está armazenada a informação principal de cada receita e na segunda é associado a cada receita um medicamento.

\lstset{caption={Sql da tabela \textit{Receitas}},label=Receitas}
\begin{lstlisting}
CREATE TABLE Receitas (
id number(10) NOT NULL,
local number(10) NOT NULL,
medico number(10) NOT NULL,
utente number(10) NOT NULL,
entidade number(10) NOT NULL,
data date NOT NULL,
utente_id number(10) NOT NULL,
utente_nome varchar2(50) NOT NULL,
utente_regime char(1) NOT NULL,
PRIMARY KEY (id));
\end{lstlisting}

De modo a limitar o numero de medicamentos inserido a quatro existe um \textit{trigger} que ocorre antes da inserção de cada linha na tabela \textit{ReceitaEmbalagens} de forma a verificar se existem já quatro medicamentos para a receita em questão.

\lstset{caption={Trigger de conrolo de numero de embalagens por receita.}}
\begin{lstlisting}
CREATE OR REPLACE TRIGGER receita_embalagem_count
BEFORE INSERT ON receitaembalagens
REFERENCING NEW AS n -- new row
FOR EACH ROW
DECLARE
num_rows NUMBER;
BEGIN
-- Limitar o numero de medicamentos por receita a 4.
SELECT COUNT(*) INTO num_rows FROM receitaembalagens WHERE receitaembalagens.receita_id = :n.receita_id;
IF num_rows > 3 THEN
RAISE_APPLICATION_ERROR(-20000, 'LIMITE DE MEDICAMENTOS POR RECEITA ULTRAPASSADO');
END IF;
END;
\end{lstlisting}

\subsection{Dispensa de Receitas}
De forma a identificar a farmácia onde cada embalagem é dispensada a tabela \textit{ReceitaEmbalagens} contém o campo \textit{farmácia\_id} que determina a se a embalagem foi já dispensada tal como em qual farmácia. O valor por defeito é \textit{NULL}, significando que a embalagem ainda não foi dispensada, quando o valor é algum corresponde ao \textit{id} da tabela \textit{Farmacias}.

\aubsection{Alterações na informação das embalagens}
Após emissão a informação em cada receita não pode sofrer alterações. Uma vez que a informação das embalagens ou dos utentes pode sofrer alterações a mais relevante de cada é copiada para a receita prevenindo assim qualquer alteração na receita.

\section{Outros}

\subsection{Incrementar Automático}
De modo a controlar eventuais erros na inserção de informação e mesmo a facilitar a programação existem determinados \textit{Triggers} e \textit{Sequences} que garantem a inserção de valores sequenciais nas chaves primárias de determinadas tabelas. Por exemplo, para a tabela \textit{Utentes} temos:

\lstset{caption={Trigger e Sequence para incrementar automaticamente o id.}, label=Incrementar}
\begin{lstlisting}
-- sequence
create sequence utentes_id_seq start with 1 increment by 1;
-- trigger
create or replace trigger utentes_insert_id
before insert on utentes
for each row
begin
select utentes_id_seq.nextval into :new.id from dual;
end;
\end{lstlisting}

Este tipo de combinação \textit{Trigge} e \textit{Sequence} existe ainda para as tabelas de médicos, embalagens receitas e farmácias.

Esta é também uma funcionalidade aperciada pelo CakePHP pois permite inserção simples sem preocupação de determinar qual o próximo \textit{id} a inserir na chave primária.

\subsection{Views}
Como já referido antes a componente web contém estatísticas. A informação para as mesmas é conseguida através de \textit{Views}. O código das \textit{Views} está também em anexo.
